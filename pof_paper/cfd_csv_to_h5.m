function time = import_time(filename, dataLines)
%IMPORTFILE Import data from a text file
%  FIELDS17 = IMPORTFILE(FILENAME) reads data from text file FILENAME
%  for the default selection.  Returns the data as a table.
%
%  FIELDS17 = IMPORTFILE(FILE, DATALINES) reads data for the specified
%  row interval(s) of text file FILENAME. Specify DATALINES as a
%  positive scalar integer or a N-by-2 array of positive scalar integers
%  for dis-contiguous row intervals.
%
%  Example:
%  fields17 = importfile("D:\DNS-CC\cylRe1502D\csv\fields_17.csv", [2, 2]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 08-Jun-2024 14:44:36

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, 2];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 21);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Time", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21"];
opts.SelectedVariableNames = "Time";
opts.VariableTypes = ["double", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21"], "EmptyFieldRule", "auto");

% Import the data
time = readtable(filename, opts);
end

function [x, y, z, ux, uy, uz, p] = import_velocity(filename, dataLines)
%IMPORTFILE Import data from a text file
%  [POINTS0, POINTS1, POINTS2, U0, U1, U2, P] = IMPORTFILE(FILENAME)
%  reads data from text file FILENAME for the default selection.
%  Returns the data as column vectors.
%
%  [POINTS0, POINTS1, POINTS2, U0, U1, U2, P] = IMPORTFILE(FILE,
%  DATALINES) reads data for the specified row interval(s) of text file
%  FILENAME. Specify DATALINES as a positive scalar integer or a N-by-2
%  array of positive scalar integers for dis-contiguous row intervals.
%
%  Example:
%  [Points0, Points1, Points2, U0, U1, U2, p] = importfile("D:\DNS-CC\cylRe1502D\csv\fields_17.csv", [1, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 08-Jun-2024 14:46:37

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [1, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 21);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Points0", "Points1", "Points2", "Var14", "U0", "U1", "U2", "Var18", "Var19", "Var20", "p"];
opts.SelectedVariableNames = ["Points0", "Points1", "Points2", "U0", "U1", "U2", "p"];
opts.VariableTypes = ["string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "double", "double", "double", "string", "double", "double", "double", "string", "string", "string", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var14", "Var18", "Var19", "Var20"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var14", "Var18", "Var19", "Var20"], "EmptyFieldRule", "auto");

% Import the data
tbl = readtable(filename, opts);

%% Convert to output type
x = tbl.Points0;
y = tbl.Points1;
z = tbl.Points2;
ux = tbl.U0;
uy = tbl.U1;
uz = tbl.U2;
p = tbl.p;
end

% this code takes the cfd data and converts it from csv format to a more
% python readable .mat file
% additionally we grid the data for ease of use


cfd_data_dir = 'D:/DNS-CC/cylRe1502D/csv/';

% the first few data points are a a lower sampling rate
start_index = 17;
last_index = 4117;

time = zeros(last_index-start_index,1);
temp_time = import_time([cfd_data_dir,'fields_',num2str(start_index),'.csv']);
[temp_x,temp_y,temp_z,temp_ux,temp_uy,temp_uz,temp_p] = import_velocity([cfd_data_dir,'fields_',num2str(start_index),'.csv']);
%%
% take only the top half of the data
zp_inds = temp_z>0;
x = temp_x(zp_inds);
y = temp_y(zp_inds);
% allocate the arrays
ux = zeros(size(x,1),last_index-start_index);
uy = zeros(size(x,1),last_index-start_index);
p = zeros(size(x,1),last_index-start_index);
% copy the first timestep
time(1) = temp_time{1,1};
ux(:,1) = temp_ux(zp_inds);
uy(:,1) = temp_uy(zp_inds);
p(:,1) = temp_p(zp_inds);

for k=(start_index+1):last_index
    temp_time = import_time([cfd_data_dir,'fields_',num2str(k),'.csv']);
    [temp_x,temp_y,temp_z,temp_ux,temp_uy,temp_uz,temp_p] = import_velocity([cfd_data_dir,'fields_',num2str(k),'.csv']);

    if (sum(temp_x(zp_inds)==x)==size(x,1))
        time(k-start_index) = temp_time{1,1};
        ux(:,k-start_index) = temp_ux(zp_inds);
        uy(:,k-start_index) = temp_uy(zp_inds);
        p(:,k-start_index) = temp_p(zp_inds);
    else
        error('point coordinates do not match')
    end
    k
end

%% save
output_data_dir = 'C:/projects/pinns_local/data/mazi_fixed/';
save([output_data_dir,'raw_data.mat'],'x','y','ux','uy','p','time','-v7.3')

